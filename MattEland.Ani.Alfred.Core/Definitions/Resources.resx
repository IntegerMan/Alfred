<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlfredStatusController_Initialize_LogHeader" xml:space="preserve">
    <value>Alfred.Initialize</value>
    <comment>This is the header for each log entry in the initialization process.</comment>
  </data>
  <data name="AlfredStatusController_Initialize_ErrorAlreadyOnline" xml:space="preserve">
    <value>Instructed to initialize but system is already online</value>
    <comment>Error message for when the system is already online.</comment>
  </data>
  <data name="AlfredStatusController_Shutdown_LogHeader" xml:space="preserve">
    <value>Alfred.Shutdown</value>
    <comment>The log header message for the shutdown process</comment>
  </data>
  <data name="AlfredTimeModule_AlfredTimeModule_BedtimeNagMessage" xml:space="preserve">
    <value>Shouldn't we be heading to bed soon?</value>
    <comment>The nag message for going to bed soon.</comment>
  </data>
  <data name="AlfredTimeModule_Name" xml:space="preserve">
    <value>Time and Date</value>
    <comment>The name of the time module.</comment>
  </data>
  <data name="AlfredTimeModule_Update_CurrentTimeDisplayString" xml:space="preserve">
    <value>The time is now {0:t}</value>
    <comment>The current time with {0} being the time DateTime.</comment>
  </data>
  <data name="AlfredProvider_AddModules_ErrorNullModule" xml:space="preserve">
    <value>Modules may not contain null entries.</value>
    <comment>Error when a provided module was null</comment>
  </data>
  <data name="AlfredProvider_AssertMustBeOffline_ErrorNotOffline" xml:space="preserve">
    <value>Alfred must be offline in order to add components.</value>
    <comment>Occurs when alfred is required to be offline.</comment>
  </data>
  <data name="AlfredProvider_Name" xml:space="preserve">
    <value>Alfred</value>
    <comment>The name of the framework.</comment>
  </data>
  <data name="AlfredCoreModule_AlfredStatusText" xml:space="preserve">
    <value>{0} is currently {1}</value>
    <comment>UI text for displaying Alfred's status with {0} being Alfred's Name and {1} being the current Status.</comment>
  </data>
  <data name="AlfredCoreModule_Name" xml:space="preserve">
    <value>System Power</value>
    <comment>The name of the Core module</comment>
  </data>
  <data name="AlfredCoreModule_AlfredNotSet" xml:space="preserve">
    <value>Alfred Provider has not been set</value>
    <comment>Widget message for when Alfred is not present</comment>
  </data>
  <data name="AlfredItemOfflineButToldToUpdate" xml:space="preserve">
    <value>{0} was offline when told to update.</value>
    <comment>Occurs when a module or subsystem was offline but forced to update. {0} is the name of the offending item.</comment>
  </data>
  <data name="AlfredModule_InitializeAlreadyOnline" xml:space="preserve">
    <value>{0} was already online when told to initialize.</value>
    <comment>Occurs when the component named {0} was initialized while already initialized.</comment>
  </data>
  <data name="AlfredComponent_ShutdownAlreadyOffline" xml:space="preserve">
    <value>{0} was already offline when told to shut down.</value>
    <comment>When a component was offline and told to go offline. {0} is the name / version.</comment>
  </data>
  <data name="AlfredSubSystemListModule_NoSubsystemsDetected" xml:space="preserve">
    <value>No Subsystems Detected</value>
    <comment>Displayed when no subsystems were installed.</comment>
  </data>
  <data name="AlfredControlSubSystem_Name" xml:space="preserve">
    <value>Alfred Control</value>
    <comment>Display name for the Alfred Control subsystem</comment>
  </data>
  <data name="InitializeButtonText" xml:space="preserve">
    <value>Initialize</value>
    <comment>Used for the initialize command on the UI</comment>
  </data>
  <data name="ShutdownButtonText" xml:space="preserve">
    <value>Shut Down</value>
    <comment>Used for the Shut Down button text on the UI</comment>
  </data>
  <data name="NoAlfredText" xml:space="preserve">
    <value>Alfred Provider has not been set</value>
    <comment>Text to display when Alfred Provider is not set.</comment>
  </data>
  <data name="AppOnlineLogMessage" xml:space="preserve">
    <value>The application is now online</value>
  </data>
  <data name="ChatModuleName" xml:space="preserve">
    <value>Chat</value>
  </data>
  <data name="NoAlfredInstance" xml:space="preserve">
    <value>This component is not currently attached to an Alfred instance</value>
  </data>
  <data name="ChatCommandToString" xml:space="preserve">
    <value>{{Subsystem: {0}, Command: {1}, Data: {2}}}</value>
  </data>
  <data name="ComponentBasePropertyChangedException" xml:space="preserve">
    <value>Encountered an exception raising a property changed event: {0}</value>
  </data>
</root>