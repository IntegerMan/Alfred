<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:MattEland.Ani.Alfred.MFDMockUp.Controls"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:layout="clr-namespace:MattEland.Ani.Alfred.PresentationAvalon.Layout;assembly=MattEland.Ani.Alfred.PresentationAvalon"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:viewModels="clr-namespace:MattEland.Ani.Alfred.MFDMockUp.ViewModels"
                    mc:Ignorable="d">


    <Thickness x:Key="ButtonStripVerticalMargin">0,14</Thickness>
    <Thickness x:Key="ButtonStripHorizontalMargin">14,0</Thickness>

    <Style x:Key="MFDButtonSeparatorStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource MFDButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="Margin" Value="8,2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <DataTemplate DataType="{x:Type viewModels:ButtonViewModel}">
        <controls:MFDButton Command="{Binding Path=ClickCommand}"
                            Style="{StaticResource MFDButtonStyle}"
                            ToolTip="{Binding Path=ToolTipText}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewModels:SeparatorViewModel}">
        <Border Style="{StaticResource MFDButtonSeparatorStyle}" />
    </DataTemplate>

    <!--  Control Template for each MFDButtonStripControl  -->
    <ControlTemplate x:Key="ButtonStripControlTemplate" TargetType="{x:Type controls:MFDButtonStrip}">

        <!--  Assume Top orientation for template. This entire panel will be rotated as needed in Triggers.  -->
        <Grid x:Name="pnlButtons"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              d:DataContext="{d:DesignInstance viewModels:MFDButtonStripViewModel}">

            <ItemsControl ItemTemplateSelector="{StaticResource AssisticantTemplateSelector}" ItemsSource="{Binding ButtonsAndSeparators}">

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <layout:DynamicPanel LayoutType="HorizontalAutoSpacePanel" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

            </ItemsControl>

        </Grid>

        <ControlTemplate.Triggers>

            <!--  By default we assume that DockDirection is top and use that template by default  -->
            <Trigger Property="DockDirection" Value="Top">
                <Setter TargetName="pnlButtons" Property="LayoutTransform" Value="{x:Null}" />
                <Setter TargetName="pnlButtons" Property="HorizontalAlignment" Value="Stretch" />
                <Setter TargetName="pnlButtons" Property="VerticalAlignment" Value="Top" />
                <Setter TargetName="pnlButtons" Property="Margin" Value="{StaticResource ButtonStripHorizontalMargin}" />
            </Trigger>

            <!--  Based on DockDirection, we'll need to rotate accordingly  -->
            <Trigger Property="DockDirection" Value="Left">
                <Setter TargetName="pnlButtons" Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="270" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="pnlButtons" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="pnlButtons" Property="VerticalAlignment" Value="Stretch" />
                <Setter TargetName="pnlButtons" Property="Margin" Value="{StaticResource ButtonStripVerticalMargin}" />
            </Trigger>

            <Trigger Property="DockDirection" Value="Right">
                <Setter TargetName="pnlButtons" Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="pnlButtons" Property="HorizontalAlignment" Value="Right" />
                <Setter TargetName="pnlButtons" Property="VerticalAlignment" Value="Stretch" />
                <Setter TargetName="pnlButtons" Property="Margin" Value="{StaticResource ButtonStripVerticalMargin}" />
            </Trigger>

            <Trigger Property="DockDirection" Value="Bottom">
                <Setter TargetName="pnlButtons" Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="180" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="pnlButtons" Property="HorizontalAlignment" Value="Stretch" />
                <Setter TargetName="pnlButtons" Property="VerticalAlignment" Value="Bottom" />
                <Setter TargetName="pnlButtons" Property="Margin" Value="{StaticResource ButtonStripHorizontalMargin}" />
            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--  Give the Button Strip Control a default template and property values  -->
    <Style TargetType="{x:Type controls:MFDButtonStrip}">
        <Setter Property="Template" Value="{StaticResource ButtonStripControlTemplate}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>

</ResourceDictionary>